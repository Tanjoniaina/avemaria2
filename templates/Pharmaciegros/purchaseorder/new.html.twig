{% extends 'base.html.twig' %}

{% block title %}New Purchaseorder{% endblock %}

{%  form_theme form _self %}

{% block body %}
    <h1>Creat Bon de commande</h1>

    <button class="btn btn-sm btn-secondary" data-bs-toggle="modal" data-bs-target="#addProductModal">
        + Ajouter un produit
    </button>

    <div class="modal fade" id="addProductModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content" id="product-form-container">
                <!-- Formulaire charg√© en AJAX ici -->
            </div>
        </div>
    </div>

    {{ include('pharmaciegros/purchaseorder/_form.html.twig') }}


{% endblock %}

{% block _purchaseorder_form_ligne_widget %}

    <p>Ici, ajouter les factures</p>
    {{ form_widget(form) }}
    <input type="hidden" id="widget-counter" value="0">
    <div class="form-group">
        <button type="button" id="add-facture" class="btn btn-primary">Ajouter</button>
    </div>

{% endblock %}

{% block _purchaseorder_form_ligne_entry_row %}
    {{ form_widget(form) }}
{% endblock %}

{% block _purchaseorder_form_ligne_entry_widget %}
    <div class="form-group" id="block_{{ id }}">
        <div class="row">
            <div class="col-10">
                <div class="row">
                    <div class="col-6">{{ form_widget(form.product) }}</div>
                    <div class="col-2">{{ form_widget(form.quantityordered) }}</div>
                    <div class="col-2">{{ form_widget(form.unitprice) }}</div>
                    <div class="col-2">{{ form_widget(form.subtotal) }}</div>
                </div>
            </div>
            <div class="col-2">
                <button type="button" data-action="delete" data-target="#block_{{ id }} " class="btn btn-danger">X</button>
            </div>
        </div>

    </div>
{% endblock %}


{%  block javascripts  %}
    {{ parent() }}
    <script src="https://code.jquery.com/jquery-2.2.4.min.js" integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=" crossorigin="anonymous"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const addButton = document.getElementById('add-facture');
            const collection = document.getElementById('purchaseorder_form_ligne');
            const counter = document.getElementById('widget-counter');

            if (addButton && collection && counter) {
                addButton.addEventListener('click', () => {
                    const index = parseInt(counter.value);
                    const prototype = collection.dataset.prototype;
                    const newForm = prototype.replace(/__name__/g, index);

                    const temp = document.createElement('div');
                    temp.innerHTML = newForm;
                    const formElement = temp.firstElementChild;

                    collection.appendChild(formElement);
                    counter.value = index + 1;

                    handleDeleteButtons();

                });
            }

            function handleDeleteButtons() {
                document.querySelectorAll('button[data-action="delete"]').forEach(button => {
                    button.onclick = () => {
                        const target = document.querySelector(button.dataset.target);
                        target?.remove();
                    };
                });
            }

            initAutocompletePriceBinding();

            // üÜï Fonction pour g√©rer le remplissage auto du prix
            function initAutocompletePriceBinding() {
                // On cible l'√©l√©ment original : le champ Symfony avec id sans `-ts-control`
                document.querySelectorAll('input[id^="purchaseorder_form_ligne_"][id$="_product"]').forEach(input => {
                    input.addEventListener('autocomplete:change', function (event) {
                        console.log('üöÄ Event autocomplete:change d√©clench√©');
                        console.log('üßæ event.detail.item =', event.detail.item);

                        const selectedOption = event.detail.item;
                        const prix = selectedOption?.data?.prix;

                        if (prix !== undefined) {
                            const inputId = input.getAttribute('id');
                            const match = inputId.match(/\d+/);
                            if (match) {
                                const index = match[0];
                                const prixField = document.querySelector(`#purchaseorder_form_ligne_${index}_unitprice`);
                                if (prixField) {
                                    prixField.value = prix;
                                    console.log('‚úÖ Prix inject√© dans unitprice');
                                } else {
                                    console.warn('‚ùå Champ unitprice introuvable');
                                }
                            }
                        } else {
                            console.warn('‚ùå Prix non trouv√© dans event.detail.item.data');
                        }
                    });
                });
            }



            // Initialisation au chargement de la page
            handleDeleteButtons();
            initAutocompletePriceBinding();
        });
    </script>


    <script src="/js/order-product-modal.js" defer></script>
{% endblock %}