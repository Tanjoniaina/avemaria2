{% extends 'base.html.twig' %}

{% block title %}Nouveau Transfert{% endblock %}

{% block body %}
    <h1 class="mb-4">Créer un nouveau transfert</h1>

    {{ form_start(form) }}

    <div class="card border-0 shadow-sm p-3">

        <div class="row mb-3">
            <div class="col-md-4">
                {{ form_label(form.status, null, {'label_attr': {'class': 'fw-bold'}}) }}
                {{ form_widget(form.status, {'attr': {'class': 'form-select form-select-sm'}}) }}
            </div>
            <div class="col-md-4">
                {{ form_label(form.transfertDate, null, {'label_attr': {'class': 'fw-bold'}}) }}
                {{ form_widget(form.transfertDate, {'attr': {'class': 'form-control form-control-sm'}}) }}
            </div>
            <div class="col-md-4">
                {{ form_label(form.comment, null, {'label_attr': {'class': 'fw-bold'}}) }}
                {{ form_widget(form.comment, {'attr': {'class': 'form-control form-control-sm'}}) }}
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-6">
                {{ form_label(form.sourceLocation, null, {'label_attr': {'class': 'fw-bold'}}) }}
                {{ form_widget(form.sourceLocation, {'attr': {'class': 'form-select form-select-sm'}}) }}
            </div>
            <div class="col-md-6">
                {{ form_label(form.destinationLocation, null, {'label_attr': {'class': 'fw-bold'}}) }}
                {{ form_widget(form.destinationLocation, {'attr': {'class': 'form-select form-select-sm'}}) }}
            </div>
        </div>

        <div class="mb-3">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h6 class="fw-bold text-muted m-0">Articles transférés</h6>
                <button type="button" id="add-transfer-line" class="btn btn-sm btn-success">
                    <i class="bi bi-plus-circle"></i> Ajouter un produit
                </button>
            </div>

            <table class="table table-sm align-middle">
                <thead class="table-light">
                <tr>
                    <th>Produit</th>
                    <th >Quantité</th>
                    <th style="width:50px;"></th>
                </tr>
                </thead>
                <tbody id="transfer_lines_wrapper"
                       data-prototype="{{ form_widget(form.ligne.vars.prototype)|e('html_attr') }}">
                {# affiche les lignes existantes en mettant produit avant quantité #}
                {% for lineForm in form.ligne %}
                    <tr class="transfer-line-block">
                        <td>{{ form_widget(lineForm.product, {'attr': {'class': 'form-select form-select-sm'}}) }}</td>
                        <td>{{ form_widget(lineForm.quantity, {'attr': {'class': 'form-control form-control-sm'}}) }}</td>
                        <td>
                            <button type="button" class="btn btn-sm btn-outline-danger remove-line">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>

        <div class="text-end">
            <button type="submit" class="btn btn-primary px-4">Valider le transfert</button>
        </div>

    </div>

    {{ form_end(form) }}

{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const addButton = document.getElementById('add-transfer-line');
            const collectionWrapper = document.getElementById('transfer_lines_wrapper');

            // index initial
            let index = collectionWrapper.querySelectorAll('.transfer-line-block').length;

            function refreshStimulusAutocomplete() {
                // on déclenche un événement que tu peux capter dans ton app.js pour "enhancer" Stimulus/UX
                document.dispatchEvent(new CustomEvent('collection-item-added'));
            }

            function createRowFromPrototype(prototypeHtml, idx) {
                // remplace le placeholder d'index
                const html = prototypeHtml.replace(/__name__/g, idx);

                // parse le HTML renvoyé par Symfony pour récupérer les inputs/selects par name
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');

                // cherche les contrôles par suffixe de name (robuste même si l'ordre du formType change)
                const productEl = doc.querySelector('[name$="[product]"]');
                const quantityEl = doc.querySelector('[name$="[quantity]"]');

                // construit la ligne <tr> avec les deux <td>
                const tr = document.createElement('tr');
                tr.classList.add('transfer-line-block');

                const tdProd = document.createElement('td');
                tdProd.innerHTML = productEl ? productEl.outerHTML : '';
                tr.appendChild(tdProd);

                const tdQty = document.createElement('td');
                tdQty.innerHTML = quantityEl ? quantityEl.outerHTML : '';
                tr.appendChild(tdQty);

                const tdAction = document.createElement('td');
                tdAction.innerHTML = '<button type="button" class="btn btn-sm btn-outline-danger remove-line"><i class="bi bi-trash"></i></button>';
                tr.appendChild(tdAction);

                return tr;
            }

            function addLine() {
                const prototype = collectionWrapper.dataset.prototype;
                if (!prototype) {
                    console.error('❌ data-prototype manquant sur le wrapper');
                    return;
                }

                const tr = createRowFromPrototype(prototype, index);
                collectionWrapper.appendChild(tr);
                index++;

                // demande la ré-initialisation de Stimulus / UX Autocomplete si nécessaire
                refreshStimulusAutocomplete();
            }

            // handler add
            addButton.addEventListener('click', addLine);

            // handler remove (delegation)
            collectionWrapper.addEventListener('click', function (e) {
                if (e.target.closest('.remove-line')) {
                    e.target.closest('tr').remove();
                }
            });
        });
    </script>
{% endblock %}
